# <===( All Services )===>
services:

  # <===( MariaDB Service )===>
  # This service runs MariaDB, which is the relational database used by WordPress.
  # It stores all WordPress data like posts, pages, users, settings, and metadata.
  # The container persists data using a Docker volume so that it survives container restarts.
  mariadb:
    container_name: mariadb
    build:
      context: requirements/mariadb
      dockerfile: Dockerfile
    env_file: .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mariadb:/var/lib/mysql
    networks:
      - inception
    restart: always

  # <===( Redis Service )===>
  # Redis is an in-memory caching system that speeds up WordPress by storing frequently accessed data.
  # It reduces database load and improves performance, especially for high-traffic sites.
  redis:
    depends_on:
      - mariadb
    container_name: redis
    build:
      context: requirements/bonus/redis
      dockerfile: Dockerfile
    networks:
      - inception
    ports:
      - "${REDIS_PORT}:6379"
    restart: always

  # <===( WordPress Service )===>
  # WordPress is the core CMS service, running PHP-FPM and connecting to MariaDB and Redis.
  # It manages site content, themes, plugins, and users.
  wordpress:
    depends_on:
      - mariadb
      - redis
    container_name: wordpress
    build:
      context: requirements/wordpress
      dockerfile: Dockerfile
    env_file: .env
    environment:
      WORDPRESS_DB_HOST: ${WORDPRESS_DB_HOST}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WP_ADMIN_USER: ${WP_ADMIN_USER}
      WP_ADMIN_PASSWORD: ${WP_ADMIN_PASSWORD}
      WP_ADMIN_EMAIL: ${WP_ADMIN_EMAIL}
      WP_USER: ${WP_USER}
      WP_USER_PASSWORD: ${WP_USER_PASSWORD}
      WP_USER_EMAIL: ${WP_USER_EMAIL}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    volumes:
      - wordpress:/var/www/html
    networks:
      - inception
    restart: always

  # <===( Nginx Service )===>
  # Nginx is the web server that serves WordPress over HTTPS.
  # It handles SSL termination, static file serving, and proxying requests to PHP-FPM.
  nginx:
    depends_on:
      - mariadb
      - redis
      - wordpress
    container_name: nginx
    build:
      context: requirements/nginx
      dockerfile: Dockerfile
    env_file: .env
    environment:
      DOMAIN_NAME: ${DOMAIN_NAME}
      NGINX_HOST: ${NGINX_HOST}
      NGINX_PORT: ${NGINX_PORT}
      SSL_CERT_PATH: ${SSL_CERT_PATH}
      SSL_KEY_PATH: ${SSL_KEY_PATH}
    volumes:
      - wordpress:/var/www/html
    networks:
      - inception
    ports:
      - "${NGINX_PORT}:443"
    restart: always

  # <===( FTP Service )===>
  # FTP service allows uploading and managing files directly in the WordPress container.
  # Useful for developers or site maintenance when direct access to the filesystem is needed.
  ftp:
    container_name: ftp
    build:
      context: requirements/bonus/ftp
      dockerfile: Dockerfile
    env_file: .env
    volumes:
      - wordpress:/var/ftp/wordpress
    networks:
      - inception
    ports:
      - "${FTP_PORT}:21"
    restart: always

  # <===( Static Website Service )===>
  # Serves a separate static website independent of WordPress.
  # Can be used for landing pages, documentation, or marketing sites.
  static-website:
    container_name: static-website
    build:
      context: requirements/bonus/static-website
      dockerfile: Dockerfile
    networks:
      - inception
    ports:
      - "${STATIC_SITE_PORT}:80"
    restart: always

  # <===( Adminer Service )===>
  # Adminer is a web-based database management tool for MariaDB.
  # Provides a simple UI to manage databases, tables, and users.
  adminer:
    container_name: adminer
    build:
      context: requirements/bonus/adminer
      dockerfile: Dockerfile
    networks:
      - inception
    ports:
      - "${ADMINER_PORT}:8080"
    restart: always

  # <===( Custom Web Service )===>
  # Any additional web service (API, backend service) connected to the same network.
  web_service:
    container_name: web_service
    build:
      context: requirements/bonus/web_service
      dockerfile: Dockerfile
    networks:
      - inception
    ports:
      - "${WEB_SERVICE}:${WEB_SERVICE}"
    restart: always

# <===( Volumes for persisting data )===>
# Docker volumes to persist WordPress files and MariaDB data outside containers.
volumes:
  wordpress:
    name: wordpress
    driver: local
    driver_opts:
      type: "none"
      device: "/home/souaammo/data/wordpress"
      o: "bind"
  mariadb:
    name: mariadb
    driver: local
    driver_opts:
      type: "none"
      device: "/home/souaammo/data/mariadb"
      o: "bind"

# <===( Network for all services )===>
# All services use the 'inception' bridge network for communication.
networks:
  inception:
    driver: bridge
    name: inception
